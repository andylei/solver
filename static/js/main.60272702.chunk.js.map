{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["concat","useToggle","init","useState","onoff","setOnoff","useCallback","b","iter","x","lcounts","word","count","c","matches_count","queryc","wordc","letter","build_matcher","opts","query","exact","mode","qr","re","RegExp","w","test","qc","ql","length","qlen","search","results","use_wiki","use_nyc","use_dict","words","sets","push","words_wiki","words_nyc","words_dict","choose_words","matcher","sort","a","map","r","Results","React","memo","props","join","App","wDict","toggleWDict","wNyc","toggleWNyc","wWiki","toggleWWiki","isExact","toggleExact","val","setVal","e","target","value","useInputState","qInput","changeQinput","choices","n","i","setI","cycle","si","useCycler","matchMode","cycleMatchMode","setOpts","className","onChange","type","checked","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.60272702.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport './App.css';\nimport words_dict from './words/dict';\nimport words_wiki from './words/wiki';\nimport words_nyc from './words/nyc';\n\nfunction useCycler(choices) {\n  const n = choices.length;\n  const [i, setI] = useState(0);\n  const cycle = useCallback(() => setI(si => (si + 1) % n), [setI, n]);\n  return [choices[i], cycle];\n}\n\nfunction useToggle(init) {\n  const [onoff, setOnoff] = useState(init);\n  const toggle = useCallback(() => setOnoff(b => !b), [setOnoff]);\n  return [onoff, toggle];\n}\n\nfunction useInputState(init) {\n  const [val, setVal] = useState(init);\n  const onChange = useCallback(e => setVal(e.target.value), [setVal]);\n  return [val, onChange];\n}\n\nfunction* concat() {\n  for (let iter of arguments) {\n    for (let x of iter) {\n      yield x;\n    }\n  }\n}\n\nfunction choose_words(opts) {\n  const { use_wiki, use_nyc, use_dict } = opts;\n  const sets = [];\n  if (use_wiki) {\n    sets.push(words_wiki.words)\n  }\n  if (use_nyc) {\n    sets.push(words_nyc.words)\n  }\n  if (use_dict) {\n    sets.push(words_dict.words)\n  }\n  return concat(...sets);\n}\n\nfunction lcounts(word) {\n  const count = {};\n  for (let c of word) {\n    if (c === '.') {\n      continue;\n    }\n    count[c] = (count[c] || 0) + 1;\n  }\n  return count;\n}\n\nfunction matches_count(queryc, wordc) {\n  for (let letter in queryc) {\n    const c = queryc[letter];\n    if ((wordc[letter] || 0) < c) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction matches_inexact_count(qlen, queryc, word, wordc) {\n  if (qlen < word.length) {\n    return false;\n  }\n  return matches_count(queryc, wordc);\n}\n\nfunction matches_exact_count(qlen, queryc, word, wordc) {\n  if (qlen !== word.length) {\n    return false;\n  }\n  return matches_count(queryc, wordc);\n}\n\nfunction build_matcher(opts) {\n  const { query, exact, mode } = opts;\n  if (mode === 'pattern') {\n    const qr = exact ? `^${query}$` : query;\n    const re = new RegExp(qr);\n    return w => re.test(w);\n  } else if (mode === 'anagram') {\n    const qc = lcounts(query);\n    const ql = query.length;\n    if (exact) {\n      return w => matches_exact_count(ql, qc, w, lcounts(w));\n    } else {\n      return w => matches_inexact_count(ql, qc, w, lcounts(w));\n    }\n  }\n}\n\nfunction search(opts) {\n  const { query, use_wiki, use_nyc, use_dict, exact, mode } = opts;\n  const results = [];\n  if (!query) {\n    return results;\n  }\n  const words = choose_words(opts);\n  const matcher = build_matcher(opts)\n  for (let w of words) {\n    if (matcher(w)) {\n      results.push([-w.length, w]);\n    }\n  }\n  return results.sort((a, b) => b[0] - a[0]).map(r => r[1]);\n}\n\nfunction _Results(props) {\n  const results = search(props);\n  if (!results.length) {\n    return <div>\n      No results\n    </div>\n  }\n  return <pre>\n    {results.join('\\n')}\n  </pre>\n}\n\nconst Results = React.memo(_Results);\n\nfunction App() {\n  const [wDict, toggleWDict] = useToggle(true);\n  const [wNyc, toggleWNyc] = useToggle(true);\n  const [wWiki, toggleWWiki] = useToggle(true);\n  const [isExact, toggleExact] = useToggle(true);\n  const [qInput, changeQinput] = useInputState('');\n  const [matchMode, cycleMatchMode] = useCycler(['pattern', 'anagram']);\n  const [opts, setOpts] = useState();\n  const search = useCallback(() => setOpts({\n    query: qInput,\n    use_wiki: wWiki,\n    use_nyc: wNyc,\n    use_dict: wDict,\n    mode: matchMode,\n    exact: isExact,\n  }), [isExact, matchMode, qInput, wDict, wNyc, wWiki, setOpts]);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Solver\n      </header>\n      <p className=\"controls\">\n        Query: <input value={qInput} onChange={changeQinput} />\n      </p>\n      <p className=\"controls\">\n        <label>\n          <input type=\"checkbox\" checked={isExact} onChange={toggleExact} />\n          Exact\n        </label>\n        &nbsp;|&nbsp;\n        Mode:<button onClick={cycleMatchMode}>{matchMode}</button>\n      </p>\n      <p className=\"controls\">\n        <label>\n          <input type=\"checkbox\" checked={wDict} onChange={toggleWDict} />\n          Dictionary\n        </label>\n        &nbsp;|&nbsp;\n        <label>\n          <input type=\"checkbox\" checked={wNyc} onChange={toggleWNyc} />\n          NYC\n        </label>\n        &nbsp;|&nbsp;\n        <label>\n          <input type=\"checkbox\" checked={wWiki} onChange={toggleWWiki} />\n          Wikipedia\n        </label>\n      </p>\n      <p><button onClick={search}>Search</button></p>\n      <Results {...opts} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}